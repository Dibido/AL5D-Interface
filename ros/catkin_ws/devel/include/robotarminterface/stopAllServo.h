// Generated by gencpp from file robotarminterface/stopAllServo.msg
// DO NOT EDIT!


#ifndef ROBOTARMINTERFACE_MESSAGE_STOPALLSERVO_H
#define ROBOTARMINTERFACE_MESSAGE_STOPALLSERVO_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace robotarminterface
{
template <class ContainerAllocator>
struct stopAllServo_
{
  typedef stopAllServo_<ContainerAllocator> Type;

  stopAllServo_()
    : Servo0(0)
    , Servo1(0)
    , Servo2(0)
    , Servo3(0)
    , Servo4(0)
    , Servo5(0)  {
    }
  stopAllServo_(const ContainerAllocator& _alloc)
    : Servo0(0)
    , Servo1(0)
    , Servo2(0)
    , Servo3(0)
    , Servo4(0)
    , Servo5(0)  {
  (void)_alloc;
    }



   typedef uint32_t _Servo0_type;
  _Servo0_type Servo0;

   typedef uint32_t _Servo1_type;
  _Servo1_type Servo1;

   typedef uint32_t _Servo2_type;
  _Servo2_type Servo2;

   typedef uint32_t _Servo3_type;
  _Servo3_type Servo3;

   typedef uint32_t _Servo4_type;
  _Servo4_type Servo4;

   typedef uint32_t _Servo5_type;
  _Servo5_type Servo5;





  typedef boost::shared_ptr< ::robotarminterface::stopAllServo_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robotarminterface::stopAllServo_<ContainerAllocator> const> ConstPtr;

}; // struct stopAllServo_

typedef ::robotarminterface::stopAllServo_<std::allocator<void> > stopAllServo;

typedef boost::shared_ptr< ::robotarminterface::stopAllServo > stopAllServoPtr;
typedef boost::shared_ptr< ::robotarminterface::stopAllServo const> stopAllServoConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robotarminterface::stopAllServo_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robotarminterface::stopAllServo_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace robotarminterface

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'robotarminterface': ['/home/owner/git/AL5D-Interface/ros/catkin_ws/src/robotarminterface/msg'], 'std_msgs': ['/opt/ros/melodic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::robotarminterface::stopAllServo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robotarminterface::stopAllServo_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robotarminterface::stopAllServo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robotarminterface::stopAllServo_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robotarminterface::stopAllServo_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robotarminterface::stopAllServo_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robotarminterface::stopAllServo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a380ddba3e52984021c096a32dd95ec0";
  }

  static const char* value(const ::robotarminterface::stopAllServo_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa380ddba3e529840ULL;
  static const uint64_t static_value2 = 0x21c096a32dd95ec0ULL;
};

template<class ContainerAllocator>
struct DataType< ::robotarminterface::stopAllServo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robotarminterface/stopAllServo";
  }

  static const char* value(const ::robotarminterface::stopAllServo_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robotarminterface::stopAllServo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint32 Servo0\n\
uint32 Servo1\n\
uint32 Servo2\n\
uint32 Servo3\n\
uint32 Servo4\n\
uint32 Servo5\n\
";
  }

  static const char* value(const ::robotarminterface::stopAllServo_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robotarminterface::stopAllServo_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.Servo0);
      stream.next(m.Servo1);
      stream.next(m.Servo2);
      stream.next(m.Servo3);
      stream.next(m.Servo4);
      stream.next(m.Servo5);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct stopAllServo_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robotarminterface::stopAllServo_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robotarminterface::stopAllServo_<ContainerAllocator>& v)
  {
    s << indent << "Servo0: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.Servo0);
    s << indent << "Servo1: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.Servo1);
    s << indent << "Servo2: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.Servo2);
    s << indent << "Servo3: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.Servo3);
    s << indent << "Servo4: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.Servo4);
    s << indent << "Servo5: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.Servo5);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOTARMINTERFACE_MESSAGE_STOPALLSERVO_H
