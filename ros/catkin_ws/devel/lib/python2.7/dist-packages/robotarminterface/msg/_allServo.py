# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from robotarminterface/allServo.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import robotarminterface.msg

class allServo(genpy.Message):
  _md5sum = "121b57178428382073f8fc86c837ef06"
  _type = "robotarminterface/allServo"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """servoPosition Servo0
servoPosition Servo1
servoPosition Servo2
servoPosition Servo3
servoPosition Servo4
servoPosition Servo5
uint32 time
================================================================================
MSG: robotarminterface/servoPosition
uint32 servoId
uint32 position"""
  __slots__ = ['Servo0','Servo1','Servo2','Servo3','Servo4','Servo5','time']
  _slot_types = ['robotarminterface/servoPosition','robotarminterface/servoPosition','robotarminterface/servoPosition','robotarminterface/servoPosition','robotarminterface/servoPosition','robotarminterface/servoPosition','uint32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       Servo0,Servo1,Servo2,Servo3,Servo4,Servo5,time

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(allServo, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.Servo0 is None:
        self.Servo0 = robotarminterface.msg.servoPosition()
      if self.Servo1 is None:
        self.Servo1 = robotarminterface.msg.servoPosition()
      if self.Servo2 is None:
        self.Servo2 = robotarminterface.msg.servoPosition()
      if self.Servo3 is None:
        self.Servo3 = robotarminterface.msg.servoPosition()
      if self.Servo4 is None:
        self.Servo4 = robotarminterface.msg.servoPosition()
      if self.Servo5 is None:
        self.Servo5 = robotarminterface.msg.servoPosition()
      if self.time is None:
        self.time = 0
    else:
      self.Servo0 = robotarminterface.msg.servoPosition()
      self.Servo1 = robotarminterface.msg.servoPosition()
      self.Servo2 = robotarminterface.msg.servoPosition()
      self.Servo3 = robotarminterface.msg.servoPosition()
      self.Servo4 = robotarminterface.msg.servoPosition()
      self.Servo5 = robotarminterface.msg.servoPosition()
      self.time = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_13I().pack(_x.Servo0.servoId, _x.Servo0.position, _x.Servo1.servoId, _x.Servo1.position, _x.Servo2.servoId, _x.Servo2.position, _x.Servo3.servoId, _x.Servo3.position, _x.Servo4.servoId, _x.Servo4.position, _x.Servo5.servoId, _x.Servo5.position, _x.time))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.Servo0 is None:
        self.Servo0 = robotarminterface.msg.servoPosition()
      if self.Servo1 is None:
        self.Servo1 = robotarminterface.msg.servoPosition()
      if self.Servo2 is None:
        self.Servo2 = robotarminterface.msg.servoPosition()
      if self.Servo3 is None:
        self.Servo3 = robotarminterface.msg.servoPosition()
      if self.Servo4 is None:
        self.Servo4 = robotarminterface.msg.servoPosition()
      if self.Servo5 is None:
        self.Servo5 = robotarminterface.msg.servoPosition()
      end = 0
      _x = self
      start = end
      end += 52
      (_x.Servo0.servoId, _x.Servo0.position, _x.Servo1.servoId, _x.Servo1.position, _x.Servo2.servoId, _x.Servo2.position, _x.Servo3.servoId, _x.Servo3.position, _x.Servo4.servoId, _x.Servo4.position, _x.Servo5.servoId, _x.Servo5.position, _x.time,) = _get_struct_13I().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_13I().pack(_x.Servo0.servoId, _x.Servo0.position, _x.Servo1.servoId, _x.Servo1.position, _x.Servo2.servoId, _x.Servo2.position, _x.Servo3.servoId, _x.Servo3.position, _x.Servo4.servoId, _x.Servo4.position, _x.Servo5.servoId, _x.Servo5.position, _x.time))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.Servo0 is None:
        self.Servo0 = robotarminterface.msg.servoPosition()
      if self.Servo1 is None:
        self.Servo1 = robotarminterface.msg.servoPosition()
      if self.Servo2 is None:
        self.Servo2 = robotarminterface.msg.servoPosition()
      if self.Servo3 is None:
        self.Servo3 = robotarminterface.msg.servoPosition()
      if self.Servo4 is None:
        self.Servo4 = robotarminterface.msg.servoPosition()
      if self.Servo5 is None:
        self.Servo5 = robotarminterface.msg.servoPosition()
      end = 0
      _x = self
      start = end
      end += 52
      (_x.Servo0.servoId, _x.Servo0.position, _x.Servo1.servoId, _x.Servo1.position, _x.Servo2.servoId, _x.Servo2.position, _x.Servo3.servoId, _x.Servo3.position, _x.Servo4.servoId, _x.Servo4.position, _x.Servo5.servoId, _x.Servo5.position, _x.time,) = _get_struct_13I().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_13I = None
def _get_struct_13I():
    global _struct_13I
    if _struct_13I is None:
        _struct_13I = struct.Struct("<13I")
    return _struct_13I
